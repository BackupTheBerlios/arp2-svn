=== include/linux/genhd.h
==================================================================
--- include/linux/genhd.h	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ include/linux/genhd.h	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -41,6 +41,8 @@
 	BSDI_PARTITION = 0xb7,		/* BSDI Partition ID */
 	MINIX_PARTITION = 0x81,		/* Minix Partition ID */
 	UNIXWARE_PARTITION = 0x63,	/* Same as GNU_HURD and SCO Unix */
+	AROS_PARTITION = 0x30,		/* AROS Partition ID */
+	AMITHLON_PARTITION = 0x76,	/* Amithlon Partition ID */
 };
 
 #ifndef __KERNEL__
=== fs/partitions/Kconfig
==================================================================
--- fs/partitions/Kconfig	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ fs/partitions/Kconfig	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -161,6 +161,15 @@
 
 	  If you don't know what all this is about, say N.
 
+config AROS_SUBPARTITION
+	bool "AROS/Amithlon RDB subpartitions support"
+	depends on PARTITION_ADVANCED && MSDOS_PARTITION && AMIGA_PARTITION
+	---help---
+	  AROS on x86 architecture and Amithlon uses an Amiga RDB partition
+	  table inside an MSDOS partition (ID 0x30 for AROS and 0x76 for
+	  Amithlon).  Say Y here if you want to access such partitions under
+	  Linux.
+
 config LDM_PARTITION
 	bool "Windows Logical Disk Manager (Dynamic Disk) support"
 	depends on PARTITION_ADVANCED
=== fs/partitions/amiga.c
==================================================================
--- fs/partitions/amiga.c	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ fs/partitions/amiga.c	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -26,19 +26,25 @@
 int
 amiga_partition(struct parsed_partitions *state, struct block_device *bdev)
 {
+	state->next = 1;
+	return parse_amiga_partition(state, bdev, 0);
+}
+
+int
+parse_amiga_partition(struct parsed_partitions *state, struct block_device *bdev, u32 offset)
+{
 	Sector sect;
 	unsigned char *data;
 	struct RigidDiskBlock *rdb;
 	struct PartitionBlock *pb;
 	int start_sect, nr_sects, blk, part, res = 0;
 	int blksize = 1;	/* Multiplier for disk block size */
-	int slot = 1;
 	char b[BDEVNAME_SIZE];
 
 	for (blk = 0; ; blk++, put_dev_sector(sect)) {
 		if (blk == RDB_ALLOCATION_LIMIT)
 			goto rdb_done;
-		data = read_dev_sector(bdev, blk, &sect);
+		data = read_dev_sector(bdev, blk+offset, &sect);
 		if (!data) {
 			if (warn_no_part)
 				printk("Dev %s: unable to read RDB block %d\n",
@@ -74,7 +80,7 @@
 	put_dev_sector(sect);
 	for (part = 1; blk>0 && part<=16; part++, put_dev_sector(sect)) {
 		blk *= blksize;	/* Read in terms partition table understands */
-		data = read_dev_sector(bdev, blk, &sect);
+		data = read_dev_sector(bdev, blk+offset, &sect);
 		if (!data) {
 			if (warn_no_part)
 				printk("Dev %s: unable to read partition block %d\n",
@@ -101,7 +107,7 @@
 			     be32_to_cpu(pb->pb_Environment[3]) *
 			     be32_to_cpu(pb->pb_Environment[5]) *
 			     blksize;
-		put_partition(state,slot++,start_sect,nr_sects);
+		put_partition(state,state->next++,start_sect+offset,nr_sects);
 		{
 			/* Be even more informative to aid mounting */
 			char dostype[4];
=== fs/partitions/amiga.h
==================================================================
--- fs/partitions/amiga.h	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ fs/partitions/amiga.h	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -3,4 +3,5 @@
  */
 
 int amiga_partition(struct parsed_partitions *state, struct block_device *bdev);
+int parse_amiga_partition(struct parsed_partitions *state, struct block_device *bdev, u32 offset);
 
=== fs/partitions/check.h
==================================================================
--- fs/partitions/check.h	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ fs/partitions/check.h	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -13,6 +13,7 @@
 		sector_t from;
 		sector_t size;
 		int flags;
+		int id;
 	} parts[MAX_PART];
 	int next;
 	int limit;
=== fs/partitions/msdos.c
==================================================================
--- fs/partitions/msdos.c	(/mirror/arp2/core/vendor/kernel/fedora/current)	(revision 2636)
+++ fs/partitions/msdos.c	(/mirror/arp2/core/arp2-kernel/current)	(revision 2636)
@@ -22,6 +22,7 @@
 #include <linux/config.h>
 
 #include "check.h"
+#include "amiga.h"
 #include "msdos.h"
 #include "efi.h"
 
@@ -132,6 +133,7 @@
 			}
 
 			put_partition(state, state->next, next, size);
+			state->parts[state->next].id = SYS_IND(p);
 			if (SYS_IND(p) == LINUX_RAID_PARTITION)
 				state->parts[state->next].flags = 1;
 			loopct = 0;
@@ -363,6 +365,20 @@
 #endif /* CONFIG_MINIX_SUBPARTITION */
 }
 
+/*
+ * AROS RDB subpartition support.
+ * Pavel Fedin <sonic_amiga@rambler.ru>
+ */
+static void
+parse_aros(struct parsed_partitions *state, struct block_device *bdev,
+		u32 offset, u32 size, int origin)
+{
+#ifdef CONFIG_AROS_SUBPARTITION
+	printk(" %s%d:", state->name, origin);
+	parse_amiga_partition(state, bdev, offset);
+#endif /* CONFIG_AROS_SUBPARTITION */
+}
+
 static struct {
 	unsigned char id;
 	void (*parse)(struct parsed_partitions *, struct block_device *,
@@ -375,6 +391,8 @@
 	{UNIXWARE_PARTITION, parse_unixware},
 	{SOLARIS_X86_PARTITION, parse_solaris_x86},
 	{NEW_SOLARIS_X86_PARTITION, parse_solaris_x86},
+ 	{AROS_PARTITION, parse_aros},
+ 	{AMITHLON_PARTITION, parse_aros},
 	{0, NULL},
 };
  
@@ -384,7 +402,7 @@
 	Sector sect;
 	unsigned char *data;
 	struct partition *p;
-	int slot;
+	int slot, max_slot;
 
 	data = read_dev_sector(bdev, 0, &sect);
 	if (!data)
@@ -442,6 +460,7 @@
 			continue;
 		}
 		put_partition(state, slot, start, size);
+		state->parts[slot].id = SYS_IND(p);
 		if (SYS_IND(p) == LINUX_RAID_PARTITION)
 			state->parts[slot].flags = 1;
 		if (SYS_IND(p) == DM6_PARTITION)
@@ -453,12 +472,13 @@
 	printk("\n");
 
 	/* second pass - output for each on a separate line */
-	p = (struct partition *) (0x1be + data);
-	for (slot = 1 ; slot <= 4 ; slot++, p++) {
-		unsigned char id = SYS_IND(p);
+	for (slot = 1, max_slot = state->next ; slot < max_slot ; slot++) {
+		unsigned char id = (unsigned char) state->parts[slot].id;
+		u32 start = state->parts[slot].from;
+		u32 size = state->parts[slot].size;
 		int n;
 
-		if (!NR_SECTS(p))
+		if (!size)
 			continue;
 
 		for (n = 0; subtypes[n].parse && id != subtypes[n].id; n++)
@@ -466,8 +486,7 @@
 
 		if (!subtypes[n].parse)
 			continue;
-		subtypes[n].parse(state, bdev, START_SECT(p)*sector_size,
-						NR_SECTS(p)*sector_size, slot);
+		subtypes[n].parse(state, bdev, start, size, slot);
 	}
 	put_dev_sector(sect);
 	return 1;

Property changes on: 
___________________________________________________________________
Name: svk:merge
 +4f48108a-62f3-0310-b161-d5a2fa85e521:/core/vendor/kernel/fedora/current:2306

