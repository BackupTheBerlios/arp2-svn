#!/bin/bash
#
# /etc/arp2-init: Start UAE/ARP2 alone
#
# Based on /etc/rc.sysinit from RedHat FC4.

prefix=@prefix@
exec_prefix=@exec_prefix@
sysconfdir=@sysconfdir@
datadir=@datadir@

export PATH=/sbin:/bin:/usr/X11R6/bin:${exec_prefix}

# Import configuration
. ${sysconfdir}/arp2.conf

# Turn on a brown/orange soft cursor, no blinking
echo -en '\033[?81;240;145c'

# White (grey+intensitivity) text on blue backround
echo -en "\033[0m\033[44m\033[34m\033[4m"

# Gimme a nice font!
setfont ${datadir}/fonts/${FONT}

# Clear screen, goto 0,0
echo -en '\e[2J\e[0;0f'

cat ${sysconfdir}/${ISSUE}

echo 
echo "Press any key to enter APR2 configuration."

# Mount /proc and /sys (done here so volume labels can work with fsck)
mount -n -t proc /proc /proc
mount -n -t usbfs /proc/bus/usb /proc/bus/usb
mount -n -t sysfs /sys /sys >/dev/null 2>&1

# Fix console loglevel
/bin/dmesg -n 3

[ -x /sbin/start_udev ] && /sbin/start_udev > /dev/null

# Only read this once.
cmdline=$(cat /proc/cmdline)

# Initialize hardware
sysctl -w kernel.modprobe="/sbin/modprobe" >/dev/null 2>&1
sysctl -w kernel.hotplug="/sbin/udevsend" >/dev/null 2>&1

ide=""
scsi=""
network=""
audio=""
other=""
eval `kmodule -d | while read devtype mod ; do
	case "$devtype" in
		"IDE")	ide="$ide $mod"
		   echo "ide=\"$ide"\";;
		"SCSI") scsi="$scsi $mod"
		   echo "scsi=\"$scsi"\";;
		"NETWORK") network="$network $mod"
		   echo "network=\"$network"\";;
		"AUDIO") audio="$audio $mod"
		   echo "audio=\"$audio"\";;
		*) other="$other $mod"
		   echo "other=\"$other"\";;
	esac
done`

load_module () {
	LC_ALL=C fgrep -xq "$1" /etc/hotplug/blacklist 2>/dev/null || modprobe $1 >/dev/null 2>&1
}

# IDE
for module in $ide ; do
	load_module $module
done

# SCSI
for module in `/sbin/modprobe -c | LC_ALL=C awk '/^alias[[:space:]]+scsi_hostadapter[0-9]*[[:space:]]/ { print $3 }'` $scsi; do
	load_module $module
done
load_module floppy

#echo -n $" storage"

# Network
pushd /etc/sysconfig/network-scripts >/dev/null 2>&1
interfaces=`ls ifcfg* | LC_ALL=C egrep -v '(ifcfg-lo|:|rpmsave|rpmorig|rpmnew)' | \
            LC_ALL=C egrep -v '(~|\.bak)$' | \
            LC_ALL=C egrep 'ifcfg-[A-Za-z0-9\._-]+$' | \
	    sed 's/^ifcfg-//g' |
	    sed 's/[0-9]/ &/' | LC_ALL=C sort -k 1,1 -k 2n | sed 's/ //'`

for i in $interfaces ; do
	eval $(LC_ALL=C fgrep "DEVICE=" ifcfg-$i)
	load_module $DEVICE
done
popd >/dev/null 2>&1

for module in $network ; do
	load_module $module
done

#echo -n $" network"

# Sound
for module in `/sbin/modprobe -c | LC_ALL=C awk '/^alias[[:space:]]+snd-card-[[:digit:]]+[[:space:]]/ { print $3 }'` $audio; do
	load_module $module
done

#echo -n $" audio"

# Everything else (duck and cover)
for module in $other ; do
	load_module $module
done

#echo -n $" done"
#echo

# Load other user-defined modules
for file in /etc/sysconfig/modules/*.modules ; do
  [ -x $file ] && $file
done

# Load modules (for backward compatibility with VARs)
if [ -f /etc/rc.modules ]; then
	/etc/rc.modules
fi

mount -n /dev/pts

# Set the system clock.
/sbin/hwclock --hctosys --utc

# Initialiaze ACPI bits
if [ -d /proc/acpi ]; then
   for module in /lib/modules/$unamer/kernel/drivers/acpi/* ; do
      insmod $module >/dev/null 2>&1
   done
fi

if LC_ALL=C fgrep -q /initrd /proc/mounts && ! LC_ALL=C fgrep -q /initrd/loopfs /proc/mounts ; then
   umount /initrd
   /sbin/blockdev --flushbufs /dev/ram0 >/dev/null 2>&1
fi

# Remount the root filesystem read-write.
mount -n -o remount,rw /

# Clear mtab
(> /etc/mtab) &> /dev/null

# Remove stale backups
rm -f /etc/mtab~ /etc/mtab~~

# Enter mounted filesystems into /etc/mtab
mount -f /
mount -f /proc >/dev/null 2>&1
mount -f /sys >/dev/null 2>&1
mount -f /dev/pts >/dev/null 2>&1
mount -f /proc/bus/usb >/dev/null 2>&1

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted).
mount -a -t nonfs,nfs4,smbfs,ncpfs,cifs,gfs -O no_netdev

# Start up swapping.
swapon -a -e

# Set up binfmt_misc
/bin/mount -t binfmt_misc none /proc/sys/fs/binfmt_misc > /dev/null 2>&1

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg -s 131072 > /var/log/dmesg

if read -n 1 -t 1 -s; then
  echo "(Configuring)"
fi

echo -n "System ready. Starting virtual machine ..."
export XORGCONFIG=${sysconfdir}/${XCONFIG}
xinit 2> /dev/null
# Drop into a shell
bash
echo " Done"

echo -n "Unmounting filesystems ..."
umount -a
mount -n -o remount,ro /
echo " Done."
echo -n "Rebooting ..."
reboot -f
