#!/bin/bash
#
# arp2-init: Start UAE/ARP2 in stand-alone mode
#
# Based on /etc/rc.sysinit from RedHat FC5.

# Start until hwclock:		0.3 s
# hwclock			1.0 s (max)
# hwclock until udev		0.2 s
# udev				4.8 s (loading kernel modules)
# udev-stw			0.4 s (loading kernel modules)
# udev-stw until arp2-config	0.7 s (fsck, mounting, filesystem cleanup)
# X				4.6 s
#
# Total:			12.0 s

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
sysconfdir=@sysconfdir@
datadir=@datadir@

#export PATH=/sbin:/bin:/usr/X11R6/bin:${bindir}
export PATH=/sbin:/bin:/usr/bin:${bindir}

# Import configuration
. ${sysconfdir}/arp2.conf

# Gimme a nice font!
setfont ${datadir}/fonts/${FONT}

CURSOR='\e[?81;240;145c'
SCREEN='\e[0m\e[44m\e[34m\e[4m'

# Turn on a brown/orange soft cursor, no blinking
echo -en "$CURSOR"

# White (grey+intensitivity) text on blue backround
echo -en "$SCREEN"

# Clear screen, goto 0,0
echo -en "\e[2J\e[0;0f"

# Make the prompt reset the colors
#export PS1="${CURSOR}${SCREEN}\s> "

cat ${sysconfdir}/${ISSUE}

echo 
echo -n "Press 'c' for config menu. Loading..."

{
HOSTNAME=`/bin/hostname`
HOSTTYPE=`uname -m`
unamer=`uname -r`

if [ -f /etc/sysconfig/network ]; then
    . /etc/sysconfig/network
fi
if [ -z "$HOSTNAME" -o "$HOSTNAME" = "(none)" ]; then
    HOSTNAME=localhost
fi

if [ ! -e /proc/mounts ]; then 
	mount -n -t proc /proc /proc
	mount -n -t sysfs /sys /sys >/dev/null 2>&1
fi
if [ ! -d /proc/bus/usb ]; then
	modprobe usbcore >/dev/null 2>&1 && mount -n -t usbfs /proc/bus/usb /proc/bus/usb
else
	mount -n -t usbfs /proc/bus/usb /proc/bus/usb
fi

echo -n "."

. /etc/init.d/functions

# Set the system clock.
ARC=0
SRM=0
UTC=0

if [ -f /etc/sysconfig/clock ]; then
   . /etc/sysconfig/clock
fi

CLOCKDEF=""
CLOCKFLAGS="$CLOCKFLAGS --hctosys"

case "$UTC" in
    yes|true)	CLOCKFLAGS="$CLOCKFLAGS --utc"
		CLOCKDEF="$CLOCKDEF (utc)" ;;
    no|false)	CLOCKFLAGS="$CLOCKFLAGS --localtime"
		CLOCKDEF="$CLOCKDEF (localtime)" ;;
esac
case "$ARC" in
    yes|true)	CLOCKFLAGS="$CLOCKFLAGS --arc"
		CLOCKDEF="$CLOCKDEF (arc)" ;;
esac
case "$SRM" in
    yes|true)	CLOCKFLAGS="$CLOCKFLAGS --srm"
		CLOCKDEF="$CLOCKDEF (srm)" ;;
esac

/sbin/hwclock $CLOCKFLAGS

echo -n "."

# Fix console loglevel
/bin/dmesg -n 3

echo -n "."

# Only read this once.
cmdline=$(cat /proc/cmdline)

# Initialize hardware
if [ -f /proc/sys/kernel/modprobe ]; then
   if ! strstr "$cmdline" nomodules && [ -f /proc/modules ] ; then
       sysctl -w kernel.modprobe="/sbin/modprobe" >/dev/null 2>&1
   else
       # We used to set this to NULL, but that causes 'failed to exec' messages"
       sysctl -w kernel.modprobe="/bin/true" >/dev/null 2>&1
   fi
fi

echo -n "."

touch /dev/.in_sysinit >/dev/null 2>&1

killall nash-hotplug >/dev/null 2>&1
/sbin/start_udev >/dev/null

echo -n "."

# Load other user-defined modules
for file in /etc/sysconfig/modules/*.modules ; do
  [ -x $file ] && $file
  echo -n "."
done

mount -n /dev/pts >/dev/null 2>&1

# Configure kernel parameters
sysctl -e -p /etc/sysctl.conf >/dev/null 2>&1

# Set the hostname.
hostname ${HOSTNAME}

# Initialize ACPI bits
if [ -d /proc/acpi ]; then
    for module in /lib/modules/$unamer/kernel/drivers/acpi/* ; do
        module=${module##*/}
        module=${module%.ko}
        modprobe $module >/dev/null 2>&1
        echo -n "."
    done
fi

# TODO: Add RAID startup code here?

echo " Done."


if [ -f /fastboot ] || strstr "$cmdline" fastboot ; then
	fastboot=yes
fi

if [ -f /fsckoptions ]; then
	fsckoptions=`cat /fsckoptions`
fi

if [ -f /forcefsck ] || strstr "$cmdline" forcefsck ; then
	fsckoptions="-f $fsckoptions"
elif [ -f /.autofsck ]; then
	[ -f /etc/sysconfig/autofsck ] && . /etc/sysconfig/autofsck
	if [ "$AUTOFSCK_DEF_CHECK" = "yes" ]; then
		AUTOFSCK_OPT="$AUTOFSCK_OPT -f"
	fi
	fsckoptions="$AUTOFSCK_OPT $fsckoptions"
fi

fsckoptions="-V $fsckoptions"

if [ -z "$fastboot" ]; then
	echo "Checking filesystems"
	fsck -T -t noopts=_netdev -A -a $fsckoptions
	rc=$?
	
	if [ "$rc" -eq "0" ]; then
		echo
	elif [ "$rc" -eq "1" ]; then
		echo
	elif [ "$rc" -eq "2" -o "$rc" -eq "3" ]; then 
		echo $"Unmounting file systems"
		umount -a
		mount -n -o remount,ro /
		echo $"Automatic reboot in progress."
		reboot -f
        fi
	
        # A return of 4 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		echo
		echo $"*** An error occurred during the file system check."
		echo $"*** Dropping you to a shell; the system will reboot"
		echo $"*** when you leave the shell."

		sulogin

		echo $"Unmounting file systems"
		umount -a
		mount -n -o remount,ro /
		echo $"Automatic reboot in progress."
		reboot -f
	fi
fi

{
# Unmount the initrd, if necessary
if LC_ALL=C fgrep -q /initrd /proc/mounts && ! LC_ALL=C fgrep -q /initrd/loopfs /proc/mounts ; then
   umount /initrd
   /sbin/blockdev --flushbufs /dev/ram0 >/dev/null 2>&1
fi

# Remount the root filesystem read-write.
mount -n -o remount,rw /

# Clear mtab
(> /etc/mtab) &> /dev/null

# Remove stale backups
rm -f /etc/mtab~ /etc/mtab~~

# Enter mounted filesystems into /etc/mtab
mount -f /
mount -f /proc >/dev/null 2>&1
mount -f /sys >/dev/null 2>&1
mount -f /dev/pts >/dev/null 2>&1
mount -f /proc/bus/usb >/dev/null 2>&1

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted).
mount -a -t nonfs,nfs4,smbfs,ncpfs,cifs,gfs -O no_netdev

# Initialize pseudo-random number generator
if [ -f "/var/lib/random-seed" ]; then
	cat /var/lib/random-seed > /dev/urandom
else
	touch /var/lib/random-seed
fi
chmod 600 /var/lib/random-seed
dd if=/dev/urandom of=/var/lib/random-seed count=1 bs=512 2>/dev/null

# Clean out /.
rm -f /fastboot /fsckoptions /forcefsck /.autofsck /halt /poweroff &> /dev/null

# Clean up utmp/wtmp
> /var/run/utmp
touch /var/log/wtmp
chgrp utmp /var/run/utmp /var/log/wtmp
chmod 0664 /var/run/utmp /var/log/wtmp

# Clean up various /tmp bits
rm -f /tmp/.X*-lock /tmp/.lock.* /tmp/.gdm_socket /tmp/.s.PGSQL.*
rm -rf /tmp/.X*-unix /tmp/.ICE-unix /tmp/.font-unix /tmp/hsperfdata_* \
       /tmp/kde-* /tmp/ksocket-* /tmp/mc-* /tmp/mcop-* /tmp/orbit-*  \
       /tmp/scrollkeeper-*  /tmp/ssh-* \
       /dev/.in_sysinit

# Make ICE directory
mkdir -m 1777 -p /tmp/.ICE-unix >/dev/null 2>&1
chown root:root /tmp/.ICE-unix

# Start up swapping.
swapon -a -e

# Set up binfmt_misc
/bin/mount -t binfmt_misc none /proc/sys/fs/binfmt_misc > /dev/null 2>&1

# Initialize the serial ports.
if [ -f /etc/rc.serial ]; then
	. /etc/rc.serial
fi

# If they asked for ide-scsi, load it
if strstr "$cmdline" ide-scsi ; then
	modprobe ide-cd >/dev/null 2>&1
	modprobe ide-scsi >/dev/null 2>&1
fi

# Boot time profiles. Yes, this should be somewhere else.
if [ -x /usr/sbin/system-config-network-cmd ]; then
  if strstr "$cmdline" netprofile= ; then
    for arg in $cmdline ; do
        if [ "${arg##netprofile=}" != "${arg}" ]; then
	    /usr/sbin/system-config-network-cmd --profile ${arg##netprofile=}
        fi
    done
  fi
fi

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg -s 131072 > /var/log/dmesg

kill -TERM `/sbin/pidof getkey` >/dev/null 2>&1
} &

/sbin/getkey c > /dev/null && config_me=yes
wait

if [ "x$config_me" == "xyes" ]; then
  ${sbindir}/arp2-config
  . ${sysconfdir}/arp2.conf
fi

echo -n "System ready. Starting virtual machine..."
export XORGCONFIG=${sysconfdir}/${XCONFIG}
xinit 2> /dev/null ${sbindir}/arp2-xinit
echo " Done."

# Drop into a shell if requested
if strstr "$cmdline" shell ; then
	bash
fi



# Save random seed
touch /var/lib/random-seed
chmod 600 /var/lib/random-seed
dd if=/dev/urandom of=/var/lib/random-seed count=1 bs=512 2>/dev/null

echo -n "Unmounting filesystems..."
swapoff -a
umount -a
mount -n -o remount,ro /
echo " Done."
echo -n "Rebooting..."
reboot -f
