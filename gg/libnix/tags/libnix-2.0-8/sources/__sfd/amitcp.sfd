* This SFD file was automatically generated by fd2sfd from
* /opt/Media/martin/source/aros/External/AROS/contrib/aminet/comm/amitcp/fd/socket_lib.fd and
* amitcp_protos.h.
==base _SocketBase
==basetype struct Library *
==libname socket.library
==include <exec/types.h>
==include <sys/types.h>
==include <sys/time.h>
==include <sys/socket.h>
==include <netinet/in.h>
==include <utility/tagitem.h>
*
* $Id: socket_lib.fd,v 1.1 2001/12/25 22:28:13 henrik Exp $
*
* Copyright (c) 1993 AmiTCP/IP Group, <amitcp-group@hut.fi>
*                    Helsinki University of Technology, Finland.
*                    All rights reserved.
*
* fd file for the "bsdsocket.library" version 3
*
* Created      : Mon Apr  5 10:19:13 1993 ppessi
* Last modified: Thu Jan 20 00:50:30 1994 jraja
*
*
*------ BSD Socket System Calls ------
==bias 30
==public
LONG Socket(LONG domain, LONG type, LONG protocol) (d0,d1,d2)
LONG Bind(LONG s, const struct sockaddr * name, LONG namelen) (base,sysvd0,a0,d1)
LONG Listen(LONG s, LONG backlog) (d0,d1)
LONG Accept(LONG s, struct sockaddr * addr, LONG * addrlen) (d0,a0,a1)
LONG Connect(LONG s, const struct sockaddr * name, LONG namelen) (d0,a0,d1)
LONG SendTo(LONG s, const UBYTE * msg, LONG len, LONG flags, const struct sockaddr * to, LONG tolen) (d0,a0,d1,d2,a1,d3)
LONG Send(LONG s, const UBYTE * msg, LONG len, LONG flags) (d0,a0,d1,d2)
LONG RecvFrom(LONG s, UBYTE * buf, LONG len, LONG flags, struct sockaddr * from, LONG * fromlen) (d0,a0,d1,d2,a1,a2)
LONG Recv(LONG s, UBYTE * buf, LONG len, LONG flags) (d0,a0,d1,d2)
LONG Shutdown(LONG s, LONG how) (d0,d1)
LONG SetSockOpt(LONG s, LONG level, LONG optname, const void * optval, LONG optlen) (d0,d1,d2,a0,d3)
LONG GetSockOpt(LONG s, LONG level, LONG optname, void * optval, LONG * optlen) (d0,d1,d2,a0,a1)
LONG GetSockName(LONG s, struct sockaddr * hostname, LONG * namelen) (d0,a0,a1)
LONG GetPeerName(LONG s, struct sockaddr * hostname, LONG * namelen) (d0,a0,a1)
*------ Generic System Calls Related to Sockets
LONG IoctlSocket(LONG d, ULONG request, char * argp) (d0,d1,a0)
LONG CloseSocket(LONG d) (d0)
*------ AmiTCP/IP specific stuff ------
LONG WaitSelect(LONG nfds, fd_set * readfds, fd_set * writefds, fd_set * execptfds, struct timeval * timeout, ULONG * maskp) (d0,a0,a1,a2,a3,d1)
void SetSocketSignals(ULONG SIGINTR, ULONG SIGIO, ULONG SIGURG) (d0,d1,d2)
LONG GetDTableSize() ()
LONG ObtainSocket(LONG id, LONG domain, LONG type, LONG protocol) (d0,d1,d2,d3)
LONG ReleaseSocket(LONG fd, LONG id) (d0,d1)
LONG ReleaseCopyOfSocket(LONG fd, LONG id) (d0,d1)
LONG Errno() ()
LONG SetErrnoPtr(void * errno_p, LONG size) (a0,d0)
*------ INet library calls related to INet address manipulation ------
char * Inet_NtoA(ULONG in) (d0)
ULONG Inet_Addr(const UBYTE * cp) (a0)
ULONG Inet_LnaOf(LONG in) (d0)
ULONG Inet_NetOf(LONG in) (d0)
ULONG Inet_MakeAddr(ULONG net, ULONG host) (d0,d1)
ULONG Inet_Network(const UBYTE * cp) (a0)
*------ NetDB Functions ------ 
struct hostent  * GetHostByName(const UBYTE * name) (a0)
struct hostent  * GetHostByAddr(const UBYTE * addr, LONG len, LONG type) (a0,d0,d1)
struct netent   * GetNetByName(const UBYTE * name) (a0)
struct netent   * GetNetByAddr(LONG net, LONG type) (d0,d1)
struct servent  * GetServByName(const UBYTE * name, const UBYTE * proto) (a0,a1)
struct servent  * GetServByPort(LONG port, const UBYTE * proto) (d0,a0)
struct protoent * GetProtoByName(const UBYTE * name) (a0)
struct protoent * GetProtoByNumber(LONG proto) (d0)
*------ Syslog function ------
void SyslogA(ULONG level, const char * format, LONG * ap) (d0,a0,a1)
*------ AmiTCP/IP 2 extensions ------
LONG Dup2Socket(LONG fd1, LONG fd2) (d0,d1)
*------ AmiTCP/IP version 3 extensions below ------
LONG SendMsg(LONG s, struct msghdr * msg, LONG flags) (d0,a0,d1)
LONG RecvMsg(LONG s, struct msghdr * msg, LONG flags) (d0,a0,d1)
*------ Host identification ------
LONG GetHostName(STRPTR hostname, LONG size) (a0,d0)
ULONG GetHostId() ()
*------ Socket Base manipulation ------
LONG SocketBaseTagList(struct TagItem * taglist) (a0)
==varargs
LONG SocketBaseTags(Tag taglist, ...) (a0)
==end
