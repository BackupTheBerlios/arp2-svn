* This file was autogenerated by fd2sfd and then hand-edited to fit libnix.
==base _lss->lx_BsdSocketBase
==basetype struct Library *
==libname amitcp.library
==include <exec/types.h>
==include <sys/types.h>
==include <sys/time.h>
==include <sys/socket.h>
==include <netinet/in.h>
==include <utility/tagitem.h>
*
* $Id: socket_lib.fd,v 1.1 2001/12/25 22:28:13 henrik Exp $
*
* Copyright (c) 1993 AmiTCP/IP Group, <amitcp-group@hut.fi>
*                    Helsinki University of Technology, Finland.
*                    All rights reserved.
*
* fd file for the "bsdsocket.library" version 3
*
* Created      : Mon Apr  5 10:19:13 1993 ppessi
* Last modified: Thu Jan 20 00:50:30 1994 jraja
*
*
*------ BSD Socket System Calls ------
==bias 30
==public
LONG TCP_Socket(LONG domain, LONG type, LONG protocol) (d0,d1,d2)
LONG TCP_Bind(LONG s, const struct sockaddr * name, LONG namelen) (base,sysvd0,a0,d1)
LONG TCP_Listen(LONG s, LONG backlog) (d0,d1)
LONG TCP_Accept(LONG s, struct sockaddr * addr, LONG * addrlen) (d0,a0,a1)
LONG TCP_Connect(LONG s, const struct sockaddr * name, LONG namelen) (d0,a0,d1)
LONG TCP_SendTo(LONG s, const UBYTE * msg, LONG len, LONG flags, const struct sockaddr * to, LONG tolen) (d0,a0,d1,d2,a1,d3)
LONG TCP_Send(LONG s, const UBYTE * msg, LONG len, LONG flags) (d0,a0,d1,d2)
LONG TCP_RecvFrom(LONG s, UBYTE * buf, LONG len, LONG flags, struct sockaddr * from, LONG * fromlen) (d0,a0,d1,d2,a1,a2)
LONG TCP_Recv(LONG s, UBYTE * buf, LONG len, LONG flags) (d0,a0,d1,d2)
LONG TCP_Shutdown(LONG s, LONG how) (d0,d1)
LONG TCP_SetSockOpt(LONG s, LONG level, LONG optname, const void * optval, LONG optlen) (d0,d1,d2,a0,d3)
LONG TCP_GetSockOpt(LONG s, LONG level, LONG optname, void * optval, LONG * optlen) (d0,d1,d2,a0,a1)
LONG TCP_GetSockName(LONG s, struct sockaddr * hostname, LONG * namelen) (d0,a0,a1)
LONG TCP_GetPeerName(LONG s, struct sockaddr * hostname, LONG * namelen) (d0,a0,a1)
*------ Generic System Calls Related to Sockets
LONG TCP_IoctlSocket(LONG d, ULONG request, char * argp) (d0,d1,a0)
LONG TCP_CloseSocket(LONG d) (d0)
*------ AmiTCP/IP specific stuff ------
LONG TCP_WaitSelect(LONG nfds, fd_set * readfds, fd_set * writefds, fd_set * execptfds, struct timeval * timeout, ULONG * maskp) (d0,a0,a1,a2,a3,d1)
void TCP_SetSocketSignals(ULONG SIGINTR, ULONG SIGIO, ULONG SIGURG) (d0,d1,d2)
LONG TCP_GetDTableSize() ()
LONG TCP_ObtainSocket(LONG id, LONG domain, LONG type, LONG protocol) (d0,d1,d2,d3)
LONG TCP_ReleaseSocket(LONG fd, LONG id) (d0,d1)
LONG TCP_ReleaseCopyOfSocket(LONG fd, LONG id) (d0,d1)
LONG TCP_Errno() ()
LONG TCP_SetErrnoPtr(void * errno_p, LONG size) (a0,d0)
*------ INet library calls related to INet address manipulation ------
char * TCP_Inet_NtoA(ULONG in) (d0)
ULONG TCP_Inet_Addr(const UBYTE * cp) (a0)
ULONG TCP_Inet_LnaOf(LONG in) (d0)
ULONG TCP_Inet_NetOf(LONG in) (d0)
ULONG TCP_Inet_MakeAddr(ULONG net, ULONG host) (d0,d1)
ULONG TCP_Inet_Network(const UBYTE * cp) (a0)
*------ NetDB Functions ------ 
struct hostent  * TCP_GetHostByName(const UBYTE * name) (a0)
struct hostent  * TCP_GetHostByAddr(const UBYTE * addr, LONG len, LONG type) (a0,d0,d1)
struct netent   * TCP_GetNetByName(const UBYTE * name) (a0)
struct netent   * TCP_GetNetByAddr(LONG net, LONG type) (d0,d1)
struct servent  * TCP_GetServByName(const UBYTE * name, const UBYTE * proto) (a0,a1)
struct servent  * TCP_GetServByPort(LONG port, const UBYTE * proto) (d0,a0)
struct protoent * TCP_GetProtoByName(const UBYTE * name) (a0)
struct protoent * TCP_GetProtoByNumber(LONG proto) (d0)
*------ Syslog function ------
void TCP_SyslogA(ULONG level, const char * format, LONG * ap) (d0,a0,a1)
*------ AmiTCP/IP 2 extensions ------
LONG TCP_Dup2Socket(LONG fd1, LONG fd2) (d0,d1)
*------ AmiTCP/IP version 3 extensions below ------
LONG TCP_SendMsg(LONG s, struct msghdr * msg, LONG flags) (d0,a0,d1)
LONG TCP_RecvMsg(LONG s, struct msghdr * msg, LONG flags) (d0,a0,d1)
*------ Host identification ------
LONG TCP_GetHostName(STRPTR hostname, LONG size) (a0,d0)
ULONG TCP_GetHostId() ()
*------ Socket Base manipulation ------
LONG TCP_SocketBaseTagList(struct TagItem * taglist) (a0)
==varargs
LONG TCP_SocketBaseTags(Tag taglist, ...) (a0)
==end
