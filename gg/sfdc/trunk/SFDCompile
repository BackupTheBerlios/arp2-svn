#!/usr/bin/perl -w                                      -- # -*- perl -*-
#
#     SFDCompile - Compile SFD files into someting useful
#     Copyright (C) 2003 Martin Blom <martin@blom.org>
#     
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2
#     of the License, or (at your option) any later version.
#     
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#     
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

use IO::Handle;
use Getopt::Long;
use Pod::Usage;

sub parse_sfd ( $ );
sub parse_proto ( $ );
sub open_output ( $$ );
sub close_output ();
sub create_fd( $ );
sub create_clib( $ );

my $rules = {
    m68k_unknown_amigaos =>
	[
	 "apa"
	 ]
};

################################################################################
### Main program ###############################################################
################################################################################

Getopt::Long::Configure ("bundling");

my $help    = '0';
my $man     = '0';
my $mode    = 'fd';
my $output  = '-';
my $quiet   = '0';
my $target  = 'm68k-unknown-amigaos';
my $version = '0';

GetOptions ('help|h|?'   => \$help,
	    'man'        => \$man,
	    'mode=s'     => \$mode,
	    'output|o=s' => \$output,
	    'quiet|q'    => \$quiet,
	    'target=s'   => \$target,
	    'version|v'  => \$version) or exit 10;

if ($version) {
    print STDERR "$Id:\n";
    print STDERR "Copyright (C) 2003 Martin Blom <martin\@blom.org>\n";
    print STDERR "This is free software; " .
	"see the source for copying conditions.\n";
    exit 0;
}

if ($help) {
    pod2usage(1);
    exit 0;
}

if ($man) {
    pod2usage(-exitstatus => 0, -verbose => 2);
    exit 0;
}

if ($#ARGV < 0) {
    pod2usage(1);
    exit 10;
}

$mode = lc $mode;

if (!($mode =~ /(fd|clib|proto|macro)/)) {
    pod2usage(1);
    exit 10;
}

# Save old STDOUT

open( OLDOUT, ">&STDOUT" );

for my $i ( 0 .. $#ARGV ) {
    my $sfd = parse_sfd ($ARGV[$i]);

    for ($mode) {
	/^fd$/ && do {
	    create_fd( $sfd );
	    last;
	};

	/^clib$/ && do {
	    create_clib( $sfd );
	    last;
	};

	die "Unknown mode specified: " . $mode;
    }

    close_output ();
}

if (!$quiet) {
    print STDERR "All done.\n";
}

open (STDOUT, ">&OLDOUT");
close (OLDOUT);

exit 0;






################################################################################
### Subroutines ################################################################
################################################################################


### parse_sfd: Parse a SFD file hand return a hash record ######################

sub parse_sfd ( $ ) {
    my $file = shift;
    local *SFD;

    my $type    = 'function';
    my $private = 0;
    my $bias    = 0;
    my $version = 1;
    my $comment = '';

    my $result = {
	copyright  => 'Copyright © 2001 Amiga, Inc.',
	id         => '',
	libname    => '',
	base       => '',
	basetype   => '',
	includes   => (),
	prototypes => ()
    };

    # Why do I need this????
    $$result{'includes'} = ();

    my $proto_line = '';
    my %proto;

    if (!$quiet) {
	( my $fn = $file ) =~ s,.*[/\\](.*),$1,;
	print STDERR "Processing SFD file '$fn'.\n";
	STDERR->flush();
    }
    
    unless (open (SFD, "<" . $file)) {
	print STDERR "Unable to open file '$file'.\n";
	die;
    };

    my $line_no = 0;

  LINE:
    while (my $line = <SFD>) {

	++$line_no;
	
	for ($line) {
	    /==copyright\s/ && do {
		( $$result{'copyright'} = $_ ) =~ s/==copyright\s+(.*)\s*/$1/;
		last;
	    };

	    /==id\s+/ && do {
		( $$result{'id'} = $_ ) =~ s/==id\s+(.*)\s*/$1/;
		last;
	    };

	    /==libname\s+/ && do {
		( $$result{'libname'} = $_ ) =~ s/==libname\s+(.*)\s*/$1/;
		last;
	    };

	    /==base\s+/ && do {
		( $$result{'base'} = $_ ) =~ s/==base\s+(.*)\s*/$1/;
		last;
	    };

	    /==basetype\s+/ && do {
		( $$result{'basetype'} = $_ ) =~ s/==basetype\s+(.*)\s*/$1/;
		last;
	    };

	    /==include\s+/ && do {
		( my $inc = $_ ) =~ s/==include\s+(.*)\s*/$1/;

		push @{$$result{'includes'}}, $inc;
		last;
	    };
	    
	    /==bias\s+/ && do {
		( $bias = $_ ) =~ s/==bias\s+(.*)\s*/$1/;
		last;
	    };

	    /==reserve\s+/ && do {
		( my $reserve = $_ ) =~ s/==reserve\s+(.*)\s*/$1/;

		$bias += 6 * $reserve;
		last;
	    };

	    /==alias\s*$/ && do {
		$type = 'alias';
		# Move back again
		$bias -= 6;
		last;
	    };

	    /==varargs\s*$/ && do {
		$type = 'varargs';
		# Move back again
		$bias -= 6;
		last;
	    };
	    
	    /==private\s*$/ && do {
		$private = 1;
		last;
	    };

	    /==public\s*$/ && do {
		$private = 0;
		last;
	    };

	    /==version\s+/ && do {
		( $version = $_ ) =~ s/==version\s+(.*)\s*/$1/;
		last;
	    };
	    
	    /==end\s*$/ && do {
		last LINE;
	    };
	    
	    /^\*/ && do {
		( my $cmt = $_ ) =~ s/^\*(.*)\s*/$1/;

		$comment .= ($comment eq '' ? "" : "\n" ) . $cmt;
		last;
	    };
	    
	    /^[^=*\n]/ && do {
		# Strip whitespaces and append
		$line =~ s/\s*(.*)\s*/$1/;
		$proto_line .= $line . " ";
		last;
	    };

	    /^\s*$/ && do {
		# Skip blank lines
		last;
	    };

	    # If we get here, we found a line we don't understand
	    print STDERR "Unable to parse line $line_no in SFD file" .
		" '$file'. The line looks like this:\n" . $line ;
	    die;
	};
	
	if ( $proto_line =~
	     /.*[A-Za-z0-9_]+\(.*\).*\(([\saAdD][0-7]-?,?)*\)\s*$/ ) {
	    push @{$$result{'prototypes'}}, {
		type    => $type,
		value   => $proto_line,
		line    => $line_no,
		private => $private,
		bias    => $bias,
		version => $version,
		comment => $comment
	    };

	    $type       = 'function';
	    $comment    = '';
	    $proto_line = '';
	    $bias += 6;
	}
    }

    if( $proto_line ne '' ) {
	# If $proto_line isn't empty, we couldn't parse it
	die "Unhanled proto '" . $proto_line . "'\n";
    }

    close (SFD);

    # Now parse the prototypes
    for my $i ( 0 .. $#{$$result{'prototypes'}} ) {
	parse_proto ($$result{'prototypes'}[$i]);
    };

    # Create some other variables

    ( $$result{'basename'} = lc $$result{'libname'} ) =~ s/(.*)\.\w+/$1/;
    $$result{'BASENAME'} = uc $$result{'basename'};
    $$result{'Basename'} = ucfirst $$result{'basename'};

    return $result;
}


### parse_proto: Parse a single function prototype  ############################

sub parse_proto ( $ ) {
    my $prototype = shift;
    
    my $return;
    my $struct;     # Just a dummy
    my $name;
    my $arguments;
    my $registers;

    if (!(($return,$struct,$name,$arguments,$registers) =
	  ( $$prototype{'value'} =~
	    /^((struct\s+)?\w+\s*?\**)\s*(\w+)\s*\((.*)\)\s*\((.*)\).*/ ))) {
	print STDERR "Unable to parse prototype on line $$prototype{'line'}.\n";
	die;
    }

    my @args;

    # Nuke whitespaces from the register specification
    $registers =~ s/\s//;
    
    $$prototype{'return'}    = $return;
    $$prototype{'funcname'}  = $name;
    @args = split(/,/,$arguments);
    @{$$prototype{'regs'}} = split(/,/,lc $registers);  # Make regs lower case
    @{$$prototype{'argnames'}} = ();                    # Initialize array
    @{$$prototype{'argtypes'}} = ();                    # Initialize array


    # Fix function pointer arguments and build $$prototype{'args'} 

    my $par_cnt = 0;
    foreach $arg (@args) {
	# Strip whitespaces
	$arg =~ s/\s*(.*?)\s*/$1/;

	if ($par_cnt != 0) {
	    my $old_arg = pop @{$$prototype{'args'}};
	    
	    push @{$$prototype{'args'}}, $old_arg . "," . $arg;
	}
	else {
	    push @{$$prototype{'args'}}, $arg;
	}

	if ($arg =~ /[()]/) {
	    $par_cnt += ( $arg =~ tr/\(/\(/ );
	    $par_cnt -= ( $arg =~ tr/\)/\)/ );
	}

    }
    
    # Make sure we have the same number of arguments as registers, or,
    # if this is a varargs function, possible one extra, á la "Tag, ..."
    
    if ( !($#{$$prototype{'args'}} == $#{$$prototype{'regs'}} || 
	   ($$prototype{'type'} eq 'varargs' &&
	    $#{$$prototype{'args'}} == $#{$$prototype{'regs'}} + 1)) ) {
	print STDERR "Failed to parse arguments/registers on SFD " .
	    "line $$prototype{'line'}:\n$$prototype{'value'}\n";
	die;
    }
    
    foreach $arg (@{$$prototype{'args'}}) {
	my $type = '';
	my $name  = '';

	if ($arg =~ /.*\(.*?\)\s*\(.*\)/) {
	    my $type1;
	    my $type2;
	    
	    ($type1, $name, $type2) =
		( $arg =~ /^\s*(.*)\(\s*\*\s*(\w+)\s*\)\s*(\(.*\))\s*/ );
	    $type = $type1 . "(*)" . $type2;
	}
	else {
	    ($type, $name) = ( $arg =~ /^\s*(.*\W)(\w*)\s*/ );
	}

	if ($type eq '' || $name eq '' && !($type =~ /\.\.\./) ) {
	    print STDERR "Type or name missing from '$arg'.\n";
	    die;
	}
	
	push @{$$prototype{'argnames'}}, $name;
	push @{$$prototype{'argtypes'}}, $type;
    }
}


### open_output: (Re)open the output file if necessary  ########################
### close_output: Close the output file if necessary  ##########################
### check_output: Check if the file will be reopended by open_output ###########

sub BEGIN {
    my $old_output = '';

    sub close_output () {
	close (STDOUT);
	$old_output = '';
    }
    
    sub will_close_output ( $$ ) {
	my $sfd      = shift;
	my $function = shift;

	my $new_output = $output;

	$new_output =~ s/%f/$function/;
	$new_output =~ s/%b/$$sfd{'base'}/;
	$new_output =~ s/%l/$$sfd{'libname'}/;
	$new_output =~ s/%n/$$sfd{'basename'}/;

	if( $old_output ne '' &&
	    $new_output ne $old_output ) {
	    return 1;
	}
	else {
	    return 0;
	}
    }
    
    sub open_output ( $$ ) {
	my $sfd      = shift;
	my $function = shift;

	my $new_output = $output;

	$new_output =~ s/%f/$function/;
	$new_output =~ s/%b/$$sfd{'base'}/;
	$new_output =~ s/%l/$$sfd{'libname'}/;
	$new_output =~ s/%n/$$sfd{'basename'}/;

	if( $new_output ne $old_output ) {

	    close_output ();

	    if ($new_output eq '-') {
		open (STDOUT, ">&OLDOUT") or die;
	    }
	    else {
		open (STDOUT, ">" . $new_output) or die;

		if (!$quiet) {
		    print STDERR "Writing to '$new_output'\n";
		}
	    }
	    
	    $old_output = $new_output;

	    return 1;
	}
	else {
	    return 0;
	}
    }
}


### create_fd: Create an old-style FD file #####################################

sub create_fd ( $ ) {
    my $sfd     = shift;
    my $bias    = -1;
    my $private = -1;
    my $version = 1;

    my $num = $#{$$sfd{'prototypes'}};

    for my $i ( 0 .. $num + 1) {
	my $funcname = $$sfd{'prototypes'}[$i]{'funcname'};
	
	if (!defined ($funcname) || will_close_output ($sfd, $funcname) != 0) {
	    print "##end\n";
	}

	if ($i > $num) {
	    last;
	}

	if( $$sfd{'prototypes'}[$i]{'type'} eq 'function' ) {
	    if (open_output ($sfd, $funcname) != 0) {
		print "* \"$$sfd{'libname'}\"\n";
		print "##base $$sfd{'base'}\n";
		$bias    = -1;
		$private = -1;
		$version = 1;
	    }

	    if ($bias != $$sfd{'prototypes'}[$i]{'bias'}) {
		$bias = $$sfd{'prototypes'}[$i]{'bias'};
		print "##bias $bias\n";
	    }

	    if ($private != $$sfd{'prototypes'}[$i]{'private'}) {
		$private = $$sfd{'prototypes'}[$i]{'private'};
		print $private == 1 ? "##private\n" : "##public\n";
	    }

	    if ($version != $$sfd{'prototypes'}[$i]{'version'}) {
		$version = $$sfd{'prototypes'}[$i]{'version'};

		print "*--- functions in V$version or higher ---\n";
	    }

	    if ($$sfd{'prototypes'}[$i]{'comment'} ne '') {
		my $comment = $$sfd{'prototypes'}[$i]{'comment'};

		$comment =~ s/^/\*/m;
		
		print "$comment\n";
	    }
	    
	    print "$$sfd{'prototypes'}[$i]{'funcname'}(";
	    print join (',', @{$$sfd{'prototypes'}[$i]{'argnames'}});
	    print ")(";
	    print join (',', @{$$sfd{'prototypes'}[$i]{'regs'}});
	    print ")\n";
	
	    $bias += 6;
	}
    }
}


### create_clib: Create a CLIB file ############################################

sub create_clib ( $ ) {
    my $sfd     = shift;
    my $version = 1;

    my $num = $#{$$sfd{'prototypes'}};

    for my $i ( 0 .. $num + 1) {
	my $funcname = $$sfd{'prototypes'}[$i]{'funcname'};
	
	if (!defined ($funcname) || will_close_output ($sfd, $funcname) != 0) {
	    print "\n";
	    print "#ifdef __cplusplus\n";
	    print "}\n";
	    print "#endif /* __cplusplus */\n";
	    print "\n";
	    print "#endif /* CLIB_$$sfd{'BASENAME'}_PROTOS_H */\n";
	}

	if ($i > $num) {
	    last;
	}
	
	if (open_output ($sfd, $funcname) != 0) {
	    my $id = $$sfd{'id'};
	    my $v  = $id;
	    my $d  = $id;

	    $v =~ s/^\$[I]d: .*? ([0-9.]+).*/$1/;
	    $d =~ s,^\$[I]d: .*? [0-9.]+ (\d{4})/(\d{2})/(\d{2}).*,($3.$2.$1),;
		
	    print "#ifndef CLIB_$$sfd{'BASENAME'}_PROTOS_H\n";
	    print "#define CLIB_$$sfd{'BASENAME'}_PROTOS_H\n";
	    print "\n";
	    print "/*\n";
	    print "**	\$VER: $$sfd{'basename'}_protos.h $v $d\n";
	    print "**\n";
	    print "**	C prototypes. For use with 32 bit integers only.\n";
	    print "**\n";
	    print "**	$$sfd{'copyright'}\n";
	    print "**	    All Rights Reserved\n";
	    print "*/\n";
	    print "\n";

	    foreach $inc (@{$$sfd{'includes'}}) {
		print "#include $inc\n";
	    }

	    print "\n";
	    print "#ifdef __cplusplus\n";
	    print "extern \"C\" {\n";
	    print "#endif /* __cplusplus */\n";
	    print "\n";

	    $version = 1;
	}

	if ($version != $$sfd{'prototypes'}[$i]{'version'}) {
	    $version = $$sfd{'prototypes'}[$i]{'version'};

	    print "\n";
	    print "/*--- functions in V$version or higher ---*/\n";
	}
	
	if ($$sfd{'prototypes'}[$i]{'comment'} ne '') {
	    my $comment = $$sfd{'prototypes'}[$i]{'comment'};

	    $comment =~ s,^(\s?)(.*),/*$1$2$1*/,m;
		
	    print "\n";
	    print "$comment\n";
	}
	
	my $args = join (',',@{$$sfd{'prototypes'}[$i]{'args'}});

	if ($args eq '') {
	    $args = "void";
	}
	
	print "$$sfd{'prototypes'}[$i]{'return'} $funcname($args);\n";
    }
}


### Help message and manual page ###############################################

__END__

=head1 NAME

SFDCompile - Compile SFD files into someting useful

=head1 SYNOPSIS

SFDCompile [options] file.sfd

  Options:
    --help -h -?            Show brief help message and exit
    --man                   Show a manual page.
    --mode=MODE             What to do
    --output=FILE -o FILE   Where to store the output
    --quiet -q              Be quiet
    --target=TARGET         Specifies the machine target
    --version -v            Show version and exit

=head1 OPTIONS

=over 8


=item B<--help>

Show a brief help message and then exit.

    
=item B<--man>

Show the complete manual page.


=item B<--mode>

Instructs B<SFDCompile> what to do. B<SFDCompile> can handle B<FD>,
B<CLIB>, B<MACRO> and B<PROTO> arguments.

=over 8

=item FD

Generate an old-style FD file.

    
=item CLIB

Generate C prototypes to be placed in Include/clib.

    
=item MACRO

Generate a headerfile containing B<gcc> specific preprocessor macros,
similar to B<fd2inline>'s B<--new> switch.

    
=item PROTO

Generate header file to be placed in Include/proto that includes the C
prototypes as well as compiler-specific inlines or pragma files.

=back


=item B<--output> 

Specifies where the result will be stored. The followign escape
sequencies are allowed in the file name. If the sequence B<%f> is
present in the name, a new file will be created for each function
processed.

=over 8

=item B<%b>

The library base variable name (I<_DOSBase>, for example).

=item B<%f>

The current funcion name (I<Open>, for example).

=item B<%l>

The name of the library or device (I<dos.library>, for example).

=item B<%n>

The base name of the library or device (I<dos>, for example).

=back

If omitted, the result will be sent to the standard output instead of
a file.

=item B<--quiet>

Be quiet.


=item B<--target>

Specifies the target when generating macros etc. The default is
B<m68k-unknown-amigaos>.

=item B<--version>

Prints the version and exits.


=back

=head1 DESCRIPTION

B<SFDCompile> is an open source replacement for Amiga, Inc.'s B<sfd>
tool, distributed with B<NDK 3.9>. It is also an replacement for
B<fd2inline> from GeekGadgets and the MorphOS team, later improved to
death by Martin Blom. It's a complete mess and needs a
replacement. SFD files and B<SFDCompile> might to be a good start.


=head1 RETURN VALUE

Returns 0 on success and 10 on errors.


=head1 AUTHOR

Martin Blom <martin@blom.org>

=head1 HISTORY

$Log:


=out
