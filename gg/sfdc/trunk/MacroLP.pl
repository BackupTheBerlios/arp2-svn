
### Class Macro: Create a macro file ###########################################

# Macros are a bit different than those generated by fd2inline.
#
# Tag lists ("stdarg") are always initialized with the first tag value
# followed by __VA_ARGS__. This generates a compile-time error if no tags
# are supplied (TAG_DONE is the minimal tag list).

BEGIN {
    package MacroLP;
    use vars qw(@ISA);
    @ISA = qw( Macro );

    sub new {
	my $proto  = shift;
	my $class  = ref($proto) || $proto;
	my $self   = $class->SUPER::new( @_ );
	bless ($self, $class);
	return $self;
    }

    sub function_start {
	my $self      = shift;
	my %params    = @_;
	my $prototype = $params{'prototype'};
	my $sfd       = $self->{SFD};
	my $nr        = $$prototype{'return'} =~ /^(VOID|void)$/;
	my $nb        = $$sfd{'base'} eq '';

	if ($$prototype{'type'} !~ /^(stdarg)|(varargs)$/) {
	    printf "	LP%d%s%s(0x%x, ", $$prototype{'numargs'},
	    $nr ? "NR" : "", $nb ? "NB" : "", $$prototype{'bias'};

	    if (!$nr) {
		print "$$prototype{'return'}, ";
	    }

	    print "$$prototype{'funcname'}, ";
	}
	else {
	    $self->SUPER::function_start (@_);
	}
    }

    sub function_arg {
	my $self      = shift;
	my %params    = @_;
	my $prototype = $params{'prototype'};
	my $argtype   = $params{'argtype'};
	my $argname   = $params{'argname'};
	my $argreg    = $params{'argreg'};
	my $argnum    = $params{'argnum'};
	my $sfd       = $self->{SFD};

	if ($$prototype{'type'} !~ /^(stdarg)|(varargs)$/) {
	    print "$argtype, $argname, $argreg, ";
	}
	else {
	    $self->SUPER::function_arg (@_);
	}
    }
    
    sub function_end {
	my $self      = shift;
	my %params    = @_;
	my $prototype = $params{'prototype'};
	my $sfd       = $self->{SFD};

	
	if ($$prototype{'type'} !~ /^(varargs)|(stdarg)$/) {

	    if ($$sfd{'base'} ne '') {
		print "\\\n	, $self->{BASE})\n";
	    }
	    else {
		print ")\n";
	    }
	}
	else {
	    $self->SUPER::function_end (@_);
	}
    }
}
